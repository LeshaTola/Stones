//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""7e62713d-0bb2-4991-bd3c-0370d7511a5a"",
            ""actions"": [
                {
                    ""name"": ""OnRotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""bd22ab29-bffc-4caf-a49e-61adb84a8758"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnRotateRigth"",
                    ""type"": ""Button"",
                    ""id"": ""ebfa52c4-ffa0-4906-8a13-8c3d3f67a3aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnMoveForward"",
                    ""type"": ""Button"",
                    ""id"": ""cebb58a5-4d0c-4ac4-ae3c-45d86ad3f05a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnMoveBack"",
                    ""type"": ""Button"",
                    ""id"": ""b53f5a57-7b20-4f1e-b7db-c4998c2d30b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnMoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""181633d3-3ed1-4f34-b88c-f36710728e42"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnMoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""b10892bd-924a-4512-be52-1574efbfdc53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnAttack"",
                    ""type"": ""Button"",
                    ""id"": ""d94a2efa-adc2-4f86-aa6c-7949eb8e3637"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""66669f7b-11d7-4fcd-bcc5-4cdead3ca256"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnRotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a49791e9-53ae-4c34-b296-9af940635f9c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnRotateRigth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1772e90a-d54f-4765-8421-5fe375feed75"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccd7b45d-be4c-442a-befa-658b053c85e0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMoveBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d6dd686-5b80-4577-a0a0-7e1589d8c046"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8de50f28-f1f7-444e-a480-dcc54d114d62"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9414b40-77e7-4be6-98a1-3de787b1fadc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_OnRotateLeft = m_Player.FindAction("OnRotateLeft", throwIfNotFound: true);
        m_Player_OnRotateRigth = m_Player.FindAction("OnRotateRigth", throwIfNotFound: true);
        m_Player_OnMoveForward = m_Player.FindAction("OnMoveForward", throwIfNotFound: true);
        m_Player_OnMoveBack = m_Player.FindAction("OnMoveBack", throwIfNotFound: true);
        m_Player_OnMoveRight = m_Player.FindAction("OnMoveRight", throwIfNotFound: true);
        m_Player_OnMoveLeft = m_Player.FindAction("OnMoveLeft", throwIfNotFound: true);
        m_Player_OnAttack = m_Player.FindAction("OnAttack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_OnRotateLeft;
    private readonly InputAction m_Player_OnRotateRigth;
    private readonly InputAction m_Player_OnMoveForward;
    private readonly InputAction m_Player_OnMoveBack;
    private readonly InputAction m_Player_OnMoveRight;
    private readonly InputAction m_Player_OnMoveLeft;
    private readonly InputAction m_Player_OnAttack;
    public struct PlayerActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnRotateLeft => m_Wrapper.m_Player_OnRotateLeft;
        public InputAction @OnRotateRigth => m_Wrapper.m_Player_OnRotateRigth;
        public InputAction @OnMoveForward => m_Wrapper.m_Player_OnMoveForward;
        public InputAction @OnMoveBack => m_Wrapper.m_Player_OnMoveBack;
        public InputAction @OnMoveRight => m_Wrapper.m_Player_OnMoveRight;
        public InputAction @OnMoveLeft => m_Wrapper.m_Player_OnMoveLeft;
        public InputAction @OnAttack => m_Wrapper.m_Player_OnAttack;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @OnRotateLeft.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnRotateLeft;
                @OnRotateLeft.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnRotateLeft;
                @OnRotateLeft.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnRotateLeft;
                @OnRotateRigth.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnRotateRigth;
                @OnRotateRigth.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnRotateRigth;
                @OnRotateRigth.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnRotateRigth;
                @OnMoveForward.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnMoveForward;
                @OnMoveForward.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnMoveForward;
                @OnMoveForward.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnMoveForward;
                @OnMoveBack.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnMoveBack;
                @OnMoveBack.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnMoveBack;
                @OnMoveBack.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnMoveBack;
                @OnMoveRight.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnMoveRight;
                @OnMoveRight.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnMoveRight;
                @OnMoveRight.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnMoveRight;
                @OnMoveLeft.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnMoveLeft;
                @OnMoveLeft.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnMoveLeft;
                @OnMoveLeft.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnMoveLeft;
                @OnAttack.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnAttack;
                @OnAttack.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnAttack;
                @OnAttack.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnOnAttack;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @OnRotateLeft.started += instance.OnOnRotateLeft;
                @OnRotateLeft.performed += instance.OnOnRotateLeft;
                @OnRotateLeft.canceled += instance.OnOnRotateLeft;
                @OnRotateRigth.started += instance.OnOnRotateRigth;
                @OnRotateRigth.performed += instance.OnOnRotateRigth;
                @OnRotateRigth.canceled += instance.OnOnRotateRigth;
                @OnMoveForward.started += instance.OnOnMoveForward;
                @OnMoveForward.performed += instance.OnOnMoveForward;
                @OnMoveForward.canceled += instance.OnOnMoveForward;
                @OnMoveBack.started += instance.OnOnMoveBack;
                @OnMoveBack.performed += instance.OnOnMoveBack;
                @OnMoveBack.canceled += instance.OnOnMoveBack;
                @OnMoveRight.started += instance.OnOnMoveRight;
                @OnMoveRight.performed += instance.OnOnMoveRight;
                @OnMoveRight.canceled += instance.OnOnMoveRight;
                @OnMoveLeft.started += instance.OnOnMoveLeft;
                @OnMoveLeft.performed += instance.OnOnMoveLeft;
                @OnMoveLeft.canceled += instance.OnOnMoveLeft;
                @OnAttack.started += instance.OnOnAttack;
                @OnAttack.performed += instance.OnOnAttack;
                @OnAttack.canceled += instance.OnOnAttack;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnOnRotateLeft(InputAction.CallbackContext context);
        void OnOnRotateRigth(InputAction.CallbackContext context);
        void OnOnMoveForward(InputAction.CallbackContext context);
        void OnOnMoveBack(InputAction.CallbackContext context);
        void OnOnMoveRight(InputAction.CallbackContext context);
        void OnOnMoveLeft(InputAction.CallbackContext context);
        void OnOnAttack(InputAction.CallbackContext context);
    }
}
